include "/home/aweso/circom/simple_circuit/fc_layer/fc_layer.circom";
template network(in_len, out_len) {
    signal input in[in_len];
    signal output out[out_len];

    component l0 = fc(32, 100);
    signal input w0[100][32];
    signal input b0[100];
    l0.weights <== w0;
    l0.biases <== b0;
    l0.in <== in;
    component l1 = fc(100, 200);
    signal input w1[200][100];
    signal input b1[200];
    l1.weights <== w1;
    l1.biases <== b1;
    l1.in <== l0.out;
    component l2 = fc(200, 100);
    signal input w2[100][200];
    signal input b2[100];
    l2.weights <== w2;
    l2.biases <== b2;
    l2.in <== l1.out;
    component l3 = fc(100, 200);
    signal input w3[200][100];
    signal input b3[200];
    l3.weights <== w3;
    l3.biases <== b3;
    l3.in <== l2.out;
    component l4 = fc(200, 100);
    signal input w4[100][200];
    signal input b4[100];
    l4.weights <== w4;
    l4.biases <== b4;
    l4.in <== l3.out;
    component l5 = fc(100, 200);
    signal input w5[200][100];
    signal input b5[200];
    l5.weights <== w5;
    l5.biases <== b5;
    l5.in <== l4.out;
    component l6 = fc(200, 100);
    signal input w6[100][200];
    signal input b6[100];
    l6.weights <== w6;
    l6.biases <== b6;
    l6.in <== l5.out;
    component l7 = fc(100, 200);
    signal input w7[200][100];
    signal input b7[200];
    l7.weights <== w7;
    l7.biases <== b7;
    l7.in <== l6.out;
    component l8 = fc(200, 100);
    signal input w8[100][200];
    signal input b8[100];
    l8.weights <== w8;
    l8.biases <== b8;
    l8.in <== l7.out;
    component l9 = fc(100, 200);
    signal input w9[200][100];
    signal input b9[200];
    l9.weights <== w9;
    l9.biases <== b9;
    l9.in <== l8.out;
    component l10 = fc(200, 100);
    signal input w10[100][200];
    signal input b10[100];
    l10.weights <== w10;
    l10.biases <== b10;
    l10.in <== l9.out;
    component l11 = fc(100, 200);
    signal input w11[200][100];
    signal input b11[200];
    l11.weights <== w11;
    l11.biases <== b11;
    l11.in <== l10.out;
    component l12 = fc(200, 100);
    signal input w12[100][200];
    signal input b12[100];
    l12.weights <== w12;
    l12.biases <== b12;
    l12.in <== l11.out;
    component l13 = fc(100, 200);
    signal input w13[200][100];
    signal input b13[200];
    l13.weights <== w13;
    l13.biases <== b13;
    l13.in <== l12.out;
    component l14 = fc(200, 100);
    signal input w14[100][200];
    signal input b14[100];
    l14.weights <== w14;
    l14.biases <== b14;
    l14.in <== l13.out;
    component l15 = fc(100, 200);
    signal input w15[200][100];
    signal input b15[200];
    l15.weights <== w15;
    l15.biases <== b15;
    l15.in <== l14.out;
    component l16 = fc(200, 100);
    signal input w16[100][200];
    signal input b16[100];
    l16.weights <== w16;
    l16.biases <== b16;
    l16.in <== l15.out;
    component l17 = fc(100, 200);
    signal input w17[200][100];
    signal input b17[200];
    l17.weights <== w17;
    l17.biases <== b17;
    l17.in <== l16.out;
    component l18 = fc(200, 100);
    signal input w18[100][200];
    signal input b18[100];
    l18.weights <== w18;
    l18.biases <== b18;
    l18.in <== l17.out;
    component l19 = fc(100, 200);
    signal input w19[200][100];
    signal input b19[200];
    l19.weights <== w19;
    l19.biases <== b19;
    l19.in <== l18.out;
    component l20 = fc(200, 100);
    signal input w20[100][200];
    signal input b20[100];
    l20.weights <== w20;
    l20.biases <== b20;
    l20.in <== l19.out;
    component l21 = fc(100, 200);
    signal input w21[200][100];
    signal input b21[200];
    l21.weights <== w21;
    l21.biases <== b21;
    l21.in <== l20.out;
    component l22 = fc(200, 100);
    signal input w22[100][200];
    signal input b22[100];
    l22.weights <== w22;
    l22.biases <== b22;
    l22.in <== l21.out;
    component l23 = fc(100, 200);
    signal input w23[200][100];
    signal input b23[200];
    l23.weights <== w23;
    l23.biases <== b23;
    l23.in <== l22.out;
    component l24 = fc(200, 100);
    signal input w24[100][200];
    signal input b24[100];
    l24.weights <== w24;
    l24.biases <== b24;
    l24.in <== l23.out;
    component l25 = fc(100, 200);
    signal input w25[200][100];
    signal input b25[200];
    l25.weights <== w25;
    l25.biases <== b25;
    l25.in <== l24.out;
    component l26 = fc(200, 100);
    signal input w26[100][200];
    signal input b26[100];
    l26.weights <== w26;
    l26.biases <== b26;
    l26.in <== l25.out;
    component l27 = fc(100, 200);
    signal input w27[200][100];
    signal input b27[200];
    l27.weights <== w27;
    l27.biases <== b27;
    l27.in <== l26.out;
    component l28 = fc(200, 100);
    signal input w28[100][200];
    signal input b28[100];
    l28.weights <== w28;
    l28.biases <== b28;
    l28.in <== l27.out;
    component l29 = fc(100, 200);
    signal input w29[200][100];
    signal input b29[200];
    l29.weights <== w29;
    l29.biases <== b29;
    l29.in <== l28.out;
    component l30 = fc(200, 100);
    signal input w30[100][200];
    signal input b30[100];
    l30.weights <== w30;
    l30.biases <== b30;
    l30.in <== l29.out;
    component l31 = fc(100, 200);
    signal input w31[200][100];
    signal input b31[200];
    l31.weights <== w31;
    l31.biases <== b31;
    l31.in <== l30.out;
    component l32 = fc(200, 100);
    signal input w32[100][200];
    signal input b32[100];
    l32.weights <== w32;
    l32.biases <== b32;
    l32.in <== l31.out;
    component l33 = fc(100, 200);
    signal input w33[200][100];
    signal input b33[200];
    l33.weights <== w33;
    l33.biases <== b33;
    l33.in <== l32.out;
    component l34 = fc(200, 100);
    signal input w34[100][200];
    signal input b34[100];
    l34.weights <== w34;
    l34.biases <== b34;
    l34.in <== l33.out;
    component l35 = fc(100, 200);
    signal input w35[200][100];
    signal input b35[200];
    l35.weights <== w35;
    l35.biases <== b35;
    l35.in <== l34.out;
    component l36 = fc(200, 100);
    signal input w36[100][200];
    signal input b36[100];
    l36.weights <== w36;
    l36.biases <== b36;
    l36.in <== l35.out;
    component l37 = fc(100, 200);
    signal input w37[200][100];
    signal input b37[200];
    l37.weights <== w37;
    l37.biases <== b37;
    l37.in <== l36.out;
    component l38 = fc(200, 100);
    signal input w38[100][200];
    signal input b38[100];
    l38.weights <== w38;
    l38.biases <== b38;
    l38.in <== l37.out;
    component l39 = fc_no_relu(100, 100);
    signal input w39[100][100];
    signal input b39[100];
    l39.weights <== w39;
    l39.biases <== b39;
    l39.in <== l38.out;
    out <== l39.out;
}

component main = network(32, 100);
