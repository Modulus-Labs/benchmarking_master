include "/home/aweso/circom/simple_circuit/fc_layer/fc_layer.circom";
template network(in_len, out_len) {
    signal input in[in_len];
    signal output out[out_len];

    component l0 = fc(32, 100);
    signal input w0[100][32];
    signal input b0[100];
    l0.weights <== w0;
    l0.biases <== b0;
    l0.in <== in;
    component l1 = fc(100, 200);
    signal input w1[200][100];
    signal input b1[200];
    l1.weights <== w1;
    l1.biases <== b1;
    l1.in <== l0.out;
    component l2 = fc(200, 100);
    signal input w2[100][200];
    signal input b2[100];
    l2.weights <== w2;
    l2.biases <== b2;
    l2.in <== l1.out;
    component l3 = fc(100, 200);
    signal input w3[200][100];
    signal input b3[200];
    l3.weights <== w3;
    l3.biases <== b3;
    l3.in <== l2.out;
    component l4 = fc(200, 100);
    signal input w4[100][200];
    signal input b4[100];
    l4.weights <== w4;
    l4.biases <== b4;
    l4.in <== l3.out;
    component l5 = fc(100, 200);
    signal input w5[200][100];
    signal input b5[200];
    l5.weights <== w5;
    l5.biases <== b5;
    l5.in <== l4.out;
    component l6 = fc(200, 100);
    signal input w6[100][200];
    signal input b6[100];
    l6.weights <== w6;
    l6.biases <== b6;
    l6.in <== l5.out;
    component l7 = fc(100, 200);
    signal input w7[200][100];
    signal input b7[200];
    l7.weights <== w7;
    l7.biases <== b7;
    l7.in <== l6.out;
    component l8 = fc(200, 100);
    signal input w8[100][200];
    signal input b8[100];
    l8.weights <== w8;
    l8.biases <== b8;
    l8.in <== l7.out;
    component l9 = fc(100, 200);
    signal input w9[200][100];
    signal input b9[200];
    l9.weights <== w9;
    l9.biases <== b9;
    l9.in <== l8.out;
    component l10 = fc(200, 100);
    signal input w10[100][200];
    signal input b10[100];
    l10.weights <== w10;
    l10.biases <== b10;
    l10.in <== l9.out;
    component l11 = fc(100, 200);
    signal input w11[200][100];
    signal input b11[200];
    l11.weights <== w11;
    l11.biases <== b11;
    l11.in <== l10.out;
    component l12 = fc(200, 100);
    signal input w12[100][200];
    signal input b12[100];
    l12.weights <== w12;
    l12.biases <== b12;
    l12.in <== l11.out;
    component l13 = fc(100, 200);
    signal input w13[200][100];
    signal input b13[200];
    l13.weights <== w13;
    l13.biases <== b13;
    l13.in <== l12.out;
    component l14 = fc(200, 100);
    signal input w14[100][200];
    signal input b14[100];
    l14.weights <== w14;
    l14.biases <== b14;
    l14.in <== l13.out;
    component l15 = fc(100, 200);
    signal input w15[200][100];
    signal input b15[200];
    l15.weights <== w15;
    l15.biases <== b15;
    l15.in <== l14.out;
    component l16 = fc(200, 100);
    signal input w16[100][200];
    signal input b16[100];
    l16.weights <== w16;
    l16.biases <== b16;
    l16.in <== l15.out;
    component l17 = fc(100, 200);
    signal input w17[200][100];
    signal input b17[200];
    l17.weights <== w17;
    l17.biases <== b17;
    l17.in <== l16.out;
    component l18 = fc(200, 100);
    signal input w18[100][200];
    signal input b18[100];
    l18.weights <== w18;
    l18.biases <== b18;
    l18.in <== l17.out;
    component l19 = fc_no_relu(100, 100);
    signal input w19[100][100];
    signal input b19[100];
    l19.weights <== w19;
    l19.biases <== b19;
    l19.in <== l18.out;
    out <== l19.out;
}

component main = network(32, 100);
